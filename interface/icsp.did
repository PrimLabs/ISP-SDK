type icsp = 
 service {
   addAdmin: (principal) -> (bool);
   changeAdmin: (vec principal) -> (bool);
   change_bucket_admin: () -> (bool);
   createNewBucket: () -> (LiveBucketExt__1);
   getAdmins: () -> (vec principal) query;
   getBucketOfFile: (text) -> (opt principal) query;
   getBuckets: () -> (opt Buckets) query;
   http_request: (HttpRequest) -> (HttpResponse) query;
   init: () -> (text);
   store: (StoreArgs) -> ();
   topUp: (nat) -> (Result);
   topUpBucket: (nat) -> ();
   wallet_receive: () -> (nat);
 };
type StreamingCallbackHttpResponse = 
 record {
   body: blob;
   token: opt CallbackToken;
 };
type StreamStrategy = variant {
                        Callback:
                         record {
                           callback:
                            func (CallbackToken) ->
                             (StreamingCallbackHttpResponse) query;
                           token: CallbackToken;
                         };};
type StoreArgs = 
 record {
   file_type: text;
   index: nat;
   is_http_open: bool;
   key: text;
   total_index: nat;
   total_size: nat64;
   value: blob;
 };
type Result = 
 variant {
   err: text;
   ok: text;
 };
type LiveBucketExt__1 = 
 record {
   canister_id: principal;
   used_memory: nat;
 };
type LiveBucketExt = 
 record {
   canister_id: principal;
   used_memory: nat;
 };
type HttpResponse = 
 record {
   body: blob;
   headers: vec HeaderField;
   status_code: nat16;
   streaming_strategy: opt StreamStrategy;
 };
type HttpRequest = 
 record {
   body: blob;
   headers: vec HeaderField;
   method: text;
   url: text;
 };
type HeaderField = 
 record {
   text;
   text;
 };
type CallbackToken = 
 record {
   index: nat;
   key: text;
   total_index: nat;
 };
type Buckets = 
 record {
   live_buckets: vec LiveBucketExt;
   old_buckets: vec principal;
 };
service : () -> icsp
